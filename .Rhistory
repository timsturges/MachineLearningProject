summary(logShuttleUse)
exp(-0.05730)
exp(-0.03184)
logShuttleUse_neg1 <- glm(I(1-shuttle$use) ~ as.numeric(shuttle$wind),family="binomial")
summary(logShuttleUse_neg1)
library(wage)
data(Wage)
install.packages("Wage")
?datasets
library(help = "datasets")
install.packages("ISLR")
data(Wage)
data(wage)
data(wages)
data(Wages)
data(Smarket)
library(ISLR)
data(Smarket)
data(Wage)
data(Advertising)
library(ISLR)
data(Advertising)
search()
search(ISLR)
?search
searchpaths()
x <- c(1,6,2)
?seq
y <- seq(from = 0,to = 10,by=2)
y
length(y)
y <- y[-1]
y
x + y
x
y
w <- c(x,y)
w
length(w)
z <- matrix(w,2,4)
z
x
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
install.packages("caret")
library(caret)
library("AppliedPredictiveModeling")
library("caret")
data(AlzheimerDisease)
str(dignosis)
str(diagnosis)
str(predictors)
summary(diagnosis)
summary(predictors)
rm(predictors)
rm(diagnosis)
data(concrete)
set.seed(975)
inTrain <- createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training <- mixtures[inTrain,]
testing <- mixtures[-inTrain,]
library(Hmisc)
?cut2
str(training)
?gl
hist(training$Cement)
?hist
hist(training$Cement, breaks=5)
hist(training$Cement, breaks=20)
hist(training$Cement, breaks=10)
hist(training$Cement, breaks=30)
hist(training$Cement, breaks=15)
summary(training)
cutCem <- cut2(training$Cement,g=10)
cutBl <- cut2(training$BlastFurnaceSlag,g=5)
cutFly <- cut2(training$Fly,g=3)
cutWat <- cut2(training$Water,g=5)
cutSup <- cut2(training$Superplasticizer,g=5)
cutCo <- cut2(training$CoarseAggregate,g=10)
cutFi <- cut2(training$FineAggregate,g=10)
cutAge <- cut2(training$Age,g=10)
qq <- qplot(cutCem,training$CompressiveStrength)
qq
qq <- qplot(cutCem,training$CompressiveStrength,col = 1)
qq
qq <- qq + qplot(cutBL,training$CompressiveStrength,col = 2)
qq
qq <- qplot(cutCem,training$CompressiveStrength,col = 1)
qq
qq <- qplot(cutBLm,training$CompressiveStrength,col = 1)
qq
qq <- qplot(cutBl,training$CompressiveStrength,col = 1)
qq
qplot(cutFly,training$CompressiveStrength,col = 1)
qplot(cutWat,training$CompressiveStrength,col = 1)
qplot(cutSup,training$CompressiveStrength,col = 1)
qplot(cutCo,training$CompressiveStrength,col = 1)
qplot(cutFi,training$CompressiveStrength,col = 1)
qplot(cutAge,training$CompressiveStrength,col = 1)
qplot(.,training$CompressiveStrength,col = 1)
qplot(training,training$CompressiveStrength,col = 1)
qplot(training[length],training$CompressiveStrength,col = 1)
qplot(nrows(training),training$CompressiveStrength,col = 1)
qplot(nrow(training),training$CompressiveStrength,col = 1)
qplot(nrow(training),training$CompressiveStrength,col = names(training))
names(training)
qplot(nrow(training),training$CompressiveStrength,col = [names(training)])
qplot(nrow(training),training$CompressiveStrength,col = training$names)
training$names
nn <- names(training)
nn
qplot(nrow(training),training$CompressiveStrength,col = fCategory)
qplot(cutAge,training$CompressiveStrength,col = 2)
qplot(cutFly,training$CompressiveStrength,col = 3)
qplot(cutAge,training$CompressiveStrength,col = 3)
cutAge <- cut2(training$Age,g=3)
qplot(cutAge,training$CompressiveStrength,col = 3)
cutAge <- cut2(training$Age,g=20)
qplot(cutAge,training$CompressiveStrength,col = 3)
qplot(cutAge,training$CompressiveStrength,col = 5)
cutAge <- cut2(training$Age,g=5)
qplot(cutAge,training$CompressiveStrength,col = 5)
cutFly <- cut2(training$Fly,g=10)
qplot(cutFly,training$CompressiveStrength,col = 5)
cutFly <- cut2(training$Fly,g=5)
qplot(cutFly,training$CompressiveStrength,col = 5)
cutFly <- cut2(training$Fly,g=3)
qplot(cutFly,training$CompressiveStrength,col = 5)
head(training)
taining[1,]
training[1,]
training[,1]
length(training)
dim(training)
nrow(training)
?plot
plot(nrow(training),training$CompressiveStrength)
plot(nrow(training),training$CompressiveStrength)
nrow(training)
nrow(testing)
nrow(training$CompressiveStrength)
unique(training$CompressiveStrength)
plot(training$CompressiveStrength)
plot(cutAge,training$CompressiveStrength,col=1)
plot(cutBl,training$CompressiveStrength,col=1)
plot(cutAge,training$CompressiveStrength,col=1)
par(new=T)
plot(cutBl,training$CompressiveStrength,col=2)
par(new=T)
plot(cutCem,training$CompressiveStrength,col=3)
par(new=T)
plot(cutCo,training$CompressiveStrength,col=4)
par(new=T)
plot(cutFi,training$CompressiveStrength,col=5)
par(new=T)
plot(cutFly,training$CompressiveStrength,col=6)
par(new=T)
plot(cutSup,training$CompressiveStrength,col=7)
plot(cutWat,training$CompressiveStrength,col=8
hist(training$SuperPlasticizer)
class(training$SuperPlasticizer)
str(training)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer+1))
mean(training$Superplasticizer)
sd(training$Superplasticizer)
unique(training$Superplasticizer)
table(cutSup)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer+1))
rm(list = ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData <- data.frame(diagnosis,predictors)
inTrain <- createDataPartition(adData$diagnosis),p=3/4)[[1]]
inTrain <- createDataPartition(adData$diagnosis,p=3/4)[[1]]
training <- adData[inTrain,]
testing <- adData[-inTrain,]
names(adData)
names("IL" %in% adData)
names("diagnosis" %in% adData)
"IL" %in% names(adData)
"IL_17E" %in% names(adData)
?grep
IL_str <- grep("^IL",colnames(training),value=TRUE)
IL_str
?predict
preProc <- preProcess(training[,IL_str],method="pca",thresh=0.8)
preProc$rotation
training[,IL_str]
testing[,IL_str]
str(training)
preProc2 <- preProcess(training[,IL_str],method="pca")
preProc2$rotation
?train
training[,IL_str]
nrow(training[,IL_str])
ncol(training[,IL_str])
ncol(training[,c(1,IL_str])
ncol(training[,c(1,IL_str)]
ncol(training[,c(1,IL_str)])
c(training[,1],training[,IL_str])
trainIL <- c(training[,1],training[,IL_str])
trainIL <- cbind(training[,1],training[,IL_str])
head(trainIL)
unique[,1]
unique(trainIL[,1])
str(preProc)
trainPC1 <- predict(preProc,trainIL[,-1])
head(str(training))
modelFit1 <- train(training$dianosis~.,method="glm",data=trainPC1)
modelFit1 <- train(training$diagnosis~.,method="glm",data=trainPC1)
install.packages("e1071")
modelFit1 <- train(training$diagnosis~.,method="glm",data=trainPC1)
trainPC2 <- predict(preProc2,trainIL[,-1])
modelFit2 <- train(training$diagnosis~.,method="glm",data=trainPC2)
testPC1 <- predict(preProc,trainIL[,-1])
testPC2 <- predict(preProc2,trainIL[,-1])
confusionMatrix(testing$diagnosis,predict(modelFit1,testPC1))
preProc
preProc2
confusionMatrix(testing$diagnosis,predict(modelFit1,testPC1))
testIL <- cbind(testing[,1],testing[,IL_str])
confusionMatrix(testing$diagnosis,predict(modelFit1,testPC1))
confusionMatrix(testIL$diagnosis,predict(modelFit1,testPC1))
rm(list=ls())
library(caret)
set.seed(3433)
data(AlzheimerDisease)
adData <- data.frame(diagnosis,predictors)
inTrain <- createDataPartition(adData$diagnosis,p=3/4)[[1]]
training <- adData[inTrain,]
testing <- adData[-inTrain,]
IL_str <- grep("^IL",colnames(training),value=TRUE)
preProc1 <- preProcess(training[,IL_str],method="pca",thresh=0.8)
preProc2 <- preProcess(training[,IL_str],method="pca")
str(preProc1)
predictIL <- predictors[,IL_str]
adData <- data.frame(diagnosis,predictIL)
training <- adData[inTrain,]
testing <- adData[-inTrain,]
modelFit1 <- train(diagnosis~.,method="glm",data=trainIL)
modelFit1 <- train(diagnosis~.,method="glm",data=training)
predict1 <- predict(modelFit1,newdata=testing)
confusionMatrix(predict1,testing$diagnosis)
modelFit2 <- train(training$diagnosis~.,method="glm",preProcess="pca",data=training,trControl=trainControl(preProcOptions=list(thresh=0.8)))
confusionMatrix(predict(modelFit2,testing),testing$diagnosis)
library(caret)
data(faithful)
set.seed(333)
inTrain <- createDataPartition(y=faithful$waiting,p=0.5,list=FALSE)
trainFaith <- faithful[inTrain,];testFaith <- faithful[-inTrain,]
head(trainFaith)
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lm1 <- lm(eruptions ~ waiting,data=trainFaith)
summary(lm1)
lines(trainFaith$waiting,lm1$fitted,lwd=3)
coef(lm1)[1] + coef(lm1)[2]*80
data.frame(waiting=80)
newdata <- data.frame(waiting=80)
predict(lm1,newdata)
par(mfrow=c(1,2))
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lines(trainFaith$waiting,predict(lm1),lwd=3)
plot(testFaith$waiting,testFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lines(testFaith$waiting,predict(lm1,newdata=testFaith),lwd=3)
sqrt(sum((lm1$fitted-trainFatih$eruptions)^2))
sqrt(sum((lm1$fitted-trainFaith$eruptions)^2))
sqrt(sum((predict(lm1,newdata=testFaith)-testFaith$eruptions)^2))
pred1 <- predict(lm1,newdata=testFaith,interval="prediction")
ord <- order(testFaith$waiting)
plot(testFaith$waiting,testFaith$eruptions,pch=19,col="blue")
par(mfrow=c(1,1))
plot(testFaith$waiting,testFaith$eruptions,pch=19,col="blue")
matlines(testFaith$waiting[ord],pred1[ord,],type="l",,col=c(1,2,3),lwd=3)
matlines(testFaith$waiting[ord],pred1[ord,],type="l",,col=c(1,2,2),lty=c(1,1,1),lwd=3)
modFit <- train(eruptions ~ waiting,data=trainFaith,method="lm")
summary(modFit$finalModel)
x <- rnorm(1000)
y <- rnorm(1000)
cov(x,y)
hist(c(x,y+3),breaks=20)
truehist(c(x,y+3),nbins=25)
contour(dd <- kde2d(x,y))
contour(x,y)
y <- 2 * x
contour(x,y)
x <- seq(0,100,by=2)
x
y <- x * .5 + rnorm(50)
length(x)
y <- x * .5 + rnorm(51)
cov(x,y)
contour(x,y)
rm(list=ls())
library(ISLR)
data(Wage)
library(ggplot2)
library(caret)
Wage <- subset(Wage,select=-c(logwage))
summary(wage)
summary(Wage)
set.seed(333)
createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
set.seed(333)
inTrain <- createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
training <- Wage[inTrain,];testing <- Wage[-inTrain,]
dim(training);dim(testing)
featurePlot(x=training[,c("age","education","jobclass")],y=training$Wage,plot="pairs")
featurePlot(x=training[,c("age","education","jobclass")],y=training$wage,plot="pairs")
qplot(age,wage,data=training)
qplot(age,wage,data=training)
qplot(age,wage,col=jobclass,data=training)
qplot(age,wage,col=education,data=training)
modFit <- train(wage ~ age + jobclass + education,method="lm",data=training)
finMod <- modFit$finalModel
print(modFit)
plot(finMod,1,pch=19,cex=0.5,col="#00000010")
pred <- predict(modFit,testing)
qplot(wage,pred,colour=year,data=testing)
qplot(wage,pred,colour=as.factor(year),data=testing)
library(caret);library(kernlab);data(spam)
inTrain <- createDataPartition(y=spam$type,p=.75,list=FALSE)
trn <- spam[inTrain,]
tst <- spam[-inTrain,]
modelFit <- train(type~.data=training,method="glm")
modelFit <- train(type~.data=trn,method="glm")
modelFit <- train(type~.,data=trn,method="glm")
setwd("/Users/Home/Documents/Online Courses/Coursera/Data Science/Machine Learning/Project/")
trn <- read.csv("./data/pml-training.csv")
tst <- read.csv("./data/pml-testing.csv")
x <- sapply(tst,anyNA)
y <- sapply(trn,anyNA)
listNA <- which(x+y >= 1)
trn_nona <- trn[,-listNA]
tst_nona <- tst[,-listNA]
library(kernlab)
library(caret)
data(spam)
inTrain <- createDataPartition(y=spam$type,p=.75,list=F)
testing <- spam[inTrain]
testing <- spam[inTrain,]
training <- spam[inTrain,]
testing <- spam[-inTrain,]
M <- abs(cor(training[,-58]))
diag(M) <- 0
which(M>0.8,arr.ind=T)
summary(M)
str(M)
M
which(M>0.8,arr.ind=T)
names(spam)[c(34,32)]
plot(spam[,34],spam[,32])
x <- .71*training$num415+.71*training$num857
y <- .71*training$num415-.71*training$num857
plot(x,y)
M <- abs(cor(trn[,-c(1:6,60)]))
M <- abs(cor(trn_nona[,-c(1:6,60)]))
diag(M) <- 0
which(M>0.8,arr.ind=T)
names(trn[,-c(1:6,60)])
plot(roll_belt,yaw_belt,color=classe,data=trn_nona)
qplot(roll_belt,yaw_belt,color=classe,data=trn_nona)
names(trn_nona)
unique(trn_nona$X)
names(trn_nona)
unique(trn_nona$user_name)
summary(unique(trn_nona$X))
summary(unique(trn_nona$raw_timestamp_part_1))
str(unique(trn_nona$raw_timestamp_part_1))
summary(trn_nona)
qplot(X,user_name,color=classe,data=trn_nona)
qplot(raw_timestamp_part_1,user_name,color=classe,data=trn_nona)
qplot(raw_timestamp_part_2,user_name,color=classe,data=trn_nona)
qplot(cvtd_timestamp,user_name,color=classe,data=trn_nona)
qplot(new_window,user_name,color=classe,data=trn_nona)
qplot(num_window,user_name,color=classe,data=trn_nona)
trn_nona <- trn_nona[,-c(1:7)]
tst_nona <- tst_nona[,-c(1:7)]
train(classe ~ .,method="rpart",data=trn_nona)
?train
modelFit <- train(classe ~ .,method="rpart",data=trn_nona)
modelFit$finalModel
library(rattle)
install.packages(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modelFit$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(modelFit$finalModel)
predict(modelFit,newdata=tst_nona)
tst_nona$classe
str(tst_nona)
names(tst)
names(trn)
rm(list=ls())
trn <- read.csv("./data/pml-training.csv")
tst <- read.csv("./data/pml-testing.csv")
x <- sapply(tst,anyNA)
y <- sapply(trn,anyNA)
listNA <- which(x+y >= 1)
trn_nona <- trn[,-listNA]
tst_nona <- tst[,-listNA]
# Further cleaning; removing unnecessary variables
trn_nona <- trn_nona[,-c(1:7)]
tst_nona <- tst_nona[,-c(1:7)]
inTrain <- createDataPartition(y=trn_nona$classe,p=0.75,list=F)
training <- trn_nona[,inTrain]
?createDataPartition
training <- trn_nona[inTrain,]
testing <- trn_nona[inTrain,]
testing <- trn_nona[-inTrain,]
modFit <- train(classe ~.,method="rpart",data=training)
predict(modFit,newdata=testing)
testing$classe
predict(modFit,newdata=testing)
list1 <- predict(modFit,newdata=testing)
list2 <- testing$classe
list1 == list2
sum(list1 == list2)
sum(list1 == list2) / nrow(testing)
head(training$classe)
tail(training$classe)
tail(trn_nona$classe)
head(trn_nona$classe)
modFit <- train(classe ~.,method="treebag",data=training)
predict(modFit,newdata=testing)
list1 <- predict(modFit,newdata=testing)
sum(list1 == list2) / nrow(testing)
modelFit
modFit
?confusionMatrix
confusionMatrix(modFit,testing)
confusionMatrix(testing$classe,predict(modFit,newdata=testing))
x
x == y
names(x)
names(y)
names(x==T)
names(x==TRUE)
x
dim(tst[,-x])
names(x==TRUE)
names(x[x])
names(y[y])
names(y[y]) %in% names(x[x])
names(x[x]) %in% names(y[y])
trn[,-x]
dim(trn[,-x])
dim(trn[,-c(names(x)])
dim(trn[,-c(names(x))])
dim(trn[,-c(names(x))])
x
-x
dim(trn[,x])
dim(trn[,-x])
dim(trn[,-(x)])
tst[,x]
listNA <- which(x==1)
listNA
tst[,-listNA]
dim(tst[,-listNA])
names(trn[,1:7])
confusionMatrix(testing$classe,predict(modFit,newdata=testing))
arguments(trainControl)
argument(trainControl)
arg(trainControl)
args(trainControl)
modTrCtrl <- trainControl(method="cv",number=5,p=0.75,allowParallel=T)
rm(modFit)
set.seed(666)
set.seed(666)
inTrain <- createDataPartition(y=trn_nona$classe,p=0.75,list=F)
training <- trn_nona[inTrain,]
testing <- trn_nona[-inTrain,]
modTrCtrl <- trainControl(method="cv",number=5,p=0.75,allowParallel=T)
modFit <- train(classe ~.,method="treebag",data=training,trControl = modTrCtrl)
confusionMatrix(testing$classe,predict(modFit,newdata=testing))
list1
list1 == list2
confusionMatrix(testing$classe,predict(modFit,newdata=testing))
100*(1-0.9894)
results <- predict(modFit,newdata=tst_nona)
results
length(results)
modPredict <- predict(modFit,newdata=tst_nona)
modPredict
results == modPredict
names(trn_nona)
modPredict
length(modPredict)
pml_write_files <- function(x){
n <- length(x)
for(i in 1:n){
filename <- paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=F,row.names=F,col.names=F)
}
}
setwd("./submission")
pml_write_files(modPredict)
getwd()
setwd("/Users//Home//Documents//Online Courses//Coursera//Data Science//Machine Learning//Project")
